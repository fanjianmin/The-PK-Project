目录
1．引言	3
1.1编写目的	3
1.2项目背景	3
2．任务概述	3
2.1目标	3
2.2运行环境	3
2.3条件与限制	3
3．数据描述	4
3.1静态数据	4
3.2动态数据	4
3.3数据库介绍	4
3.4数据词典	4
3.5数据采集	4
4．功能需求	4
4.1功能划分	4
4.2功能描述	5
4.3.1注册	5
4.3.2 筛选	6
4.3.3系统设置	6
5．性能需求	6
5.1数据精确度	6
5.2时间特性	6
5.3适应性	6
6．运行需求	7
6.1用户界面	7
6.2硬件接口	7
6.3软件接口	7
6.4故障处理	7
7．其它需求	7
7.1 系统健壮性	7
7.2 可拓展性	7
7.3 可重用性	7
7.4 高效性	8
7.5 安全性	8

1．引言
1.1编写目的
  实现一种交友软件，为了突出它的特点，就是用户可以根据自己的喜好在所有注册这个软件的人中查找和自己同名，同生日的人，或者校友，老乡等，可以只查找一类，也可以同时查找多类，例如查找自己的同校老乡等。当然，用户也可以在该软件注册自己的信息，方便其他人找到自己，填写信息时，用身份证号进行区别，一般是留下自己的QQ号或者是微信号。
1.2项目背景
在我们来到大学之后，首先想到的就是联系自己的老乡，因此产生了老乡会这么一个有爱的地方，我就想到利用当下流行的网上交友软件来实现迅速找到自己的老乡，在此基础上，我将查找范围扩大，不仅可以找老乡，还可以找与自己同名，同生日，校友等；用户还可以注册自己的信息，来让别人找到自己。这个项目大约包括三个界面，一张表，两个逻辑。
2．任务概述
2.1目标
提供一个在windows操作系统环境下运行的网上交友系统，提供用户的注册和有缘人筛选。
2.2运行环境
操作系统：Windows7/Windows8/Windows XP/Mac OS
数据库：MySQL
Java虚拟机：1.5版本及以上
2.3条件与限制
开发人员	于晨阳
开发语言	Java
界面	界面简洁友好，易于操作
可靠性	要有一定的容错机制
安全性	保证数据库内数据的安全
限制	时间有限，本系统还需要借助QQ、微信等交友软件来实现加为好友功能，后期会完善注册并登陆等内容
3．数据描述
3.1静态数据
本系统只有一张用户信息表，由用户注册而来，因此没有静态数据，但是在后期扩展中会加入管理员之类的静态数据。
3.2动态数据
用户表中的用户信息都是动态数据
3.3数据库介绍
MySQL，关系型数据库。
3.4数据词典
数据流名：用户信息 
别名：无
组成：用户姓名+性别+生日+联系方式+所在大学+所学专业+籍贯 
备注：
3.5数据采集
用户输入为主。
4．功能需求
4.1功能划分
模块名称	模块功能	功能说明
注册	用户注册	用户在多给信息表中完善个人信息
查找“有缘人”	筛选用户的“有缘人”	可根据用户选择的一个或者多个选项以及想要筛选出的信息筛选出合适内容
4.2功能描述
这是一款能够寻找有缘人的简易交友软件，用户可以注册自己的信息，让别人查找到自己，也可以直接进入“寻找‘有缘人’”界面，根据自己想要查找的信息找到自己的有缘人并加为好友。目前，本系统还需要借助QQ、微信等交友软件来实现加为好友功能，后期会完善注册并登陆等内容，使该软件更加独立。
流程图：








用例图：

 
4.3.1注册 
描述项	说明
用例名称	注册
参与者	用户
用例描述	用户注册个人信息
前置条件	无
基本操作流程	系统给出用户信息表，用户进行完善，同时提示各种格式错误。
4.3.2 筛选
描述项	说明
用例名称	筛选
参与者	用户
用例描述	用户筛选有缘人
前置条件	无
基本操作流程	根据用户选择的一个或者多个选项以及想要筛选出的信息筛选出合适内容
4.3.3系统设置
用于扩展
描述项	说明
用例名称	系统设置
参与者	管理员
用例描述	对用户信息进行管理
前置条件	以管理员身份登录
基本操作流程	增加或删除用户需要填写的信息，删除非法用户
5．性能需求
5.1数据精确度
用户信息要求格式正确。
5.2时间特性
数据库中数据到界面的传输，要求在完成一次点击之后立即完成。 
5.3适应性
接口应具有较高的可重用性，并易于拓展，加入新功能时不会对原有结构造成影响。
6．运行需求
6.1用户界面
界面主要应由按钮及标题组成，显示信息的部分要足够明确，使用户清楚地知道自己应该使用那个按钮实现什么功能。
6.2硬件接口
支持常用的服务器及个人计算机
6.3软件接口
本软件运行在windows系统上，后台与MySQL数据库进行交互。
6.4故障处理
用户信息表中用身份证号做主键，当有用户注册时用到的身份证号已经注册使用过了，就会提示该用户已经注册，系统拒绝处理。
7．其它需求
7.1 系统健壮性
具有一定的容错能力，并能够以友好而明确的方式提醒操作者。
7.2 可拓展性
系统的结构易于拓展，方便加入后期的新功能。
7.3 可重用性
系统的接口、实体类等需要有较高的可重用性。
7.4 高效性
算法及有关数据库信息的调度应当高效。
7.5 安全性
系统应具有一定的安全性，防止信息的丢失泄露。

